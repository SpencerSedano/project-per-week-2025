@page "/timer"
@rendermode InteractiveWebAssembly

<PageTitle>Timer</PageTitle>
@* Timer Configuration *@
<div class="d-flex">
    <div >
        <label>Name</label>
        <input type="text" @bind="TimerName">

        <button type="button" class="btn btn-dark" @onclick="CreateANewTimer">Add Timer</button>

    </div>
    <select class="flex form-select w-25" aria-label="Select your Icon">
        <option selected>Select your Icon</option>
        <option value="1">One</option>
        <option value="2">Two</option>
        <option value="3">Three</option>
    </select>
</div>

<!-- Timer Creation -->
<div class="d-flex justify-content-center flex-wrap">
    @foreach (var timer in AllTimers)
    {
        @if (!string.IsNullOrEmpty(timer.Name))
        {
            <CreateATimer InitialColor="@timer.Color" TimerName="@timer.Name"/>
            Console.WriteLine($"Timer created: {timer.Name}, {timer.Id}");
        }
        else
        {
            <p>No Timers Now</p>
        }
    }
</div>

@code {
    public string? TimerName;
    public int TimerId = 0;
    public Dictionary<string, int> TimersCreated = new();
    List<Models.Timer> AllTimers = new List<Models.Timer>();
    public List<string> colors = new()
    {
        "bg-primary",
        "bg-secondary",
        "bg-success",
        "bg-danger",
        "bg-warning",
        "bg-info",
        "bg-dark",
    };

    private string GetRandomColor()
    {
        var randomIndex = Random.Shared.Next(0, colors.Count);
        return colors[randomIndex];
    }

    void CreateANewTimer()
    {
        Console.WriteLine($"This is the timer id: {TimerId}");
        if (!string.IsNullOrEmpty(TimerName) && AllTimers.All(timer => timer.Name != TimerName))
        {
            // TimersCreated.TryAdd(TimerName, TimerId);
            AllTimers.Add(new Models.Timer(++TimerId, TimerName, GetRandomColor()));
        }
        else
        {
            Console.WriteLine("Please enter a valid name for the timer");
        }

        // TimerId++;
        Console.WriteLine(AllTimers);
        InvokeAsync(StateHasChanged);
    }

}